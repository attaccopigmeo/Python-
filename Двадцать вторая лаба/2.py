"""Юный путешественник решил изучить схему авиационного сообщения Схема
авиационного сообщения задана в текстовом файле с именем FileName. в виде матрицы
смежности. Первая строка файла содержит количество городов (n) n<=25, связанных
авиационным сообщением, а следующие n строк хранят матрицу (m), m[i][j]=0, если не
имеется возможности перелета из города i в город j, иначе m[i][j]=1. Определить номера
городов, в которые из города K можно долететь менее чем с L пересадками. Перечислите
номера таких городов в порядке возрастания. Нумерация городов начинается с 1. Если
таких городов нет, выведите число (-1)."""


filename = input('Введите FileName: ')
f = open('Двадцать вторая лаба/' + filename, 'r')
adj_matrix = []
n = int(f.readline())
for row in f:
    adj_matrix.append(list(row.split()))
f.close()

l = int(input('Введите максимальное число пересадок L: '))
k = int(input('Введите начальный город K: '))

# Используем алгоритм поиска в ширину
# В каждой вершине добавляем её непосещённых соседей в очередь
# Посещаем вершины в порядке очереди, при этом присваивая расстояние
# Если расстояние оказалось равно L, останавливаем поиск

queue = [(k - 1, 0)] # в очереди храним пары (номер города с 0, расстояние от K)
visited = [False] * n
ans = []
while len(queue) > 0:
    cur, dist = queue[0]
    if dist == l: # по построению алгоритма поиска в ширину далее все расстояния будут не меньше L
        break
    ans.append(cur + 1) # если расстояние меньше L, добавляем очередной город
    queue = queue[1:] # удаляем первый элемент
    for j in range(n):
        if adj_matrix[cur][j] != '0' and not visited[j]:
            queue.append((j, dist + 1))
print('Номера городов, которые можно достичь из города K менее, чем за L пересадок:')
if len(ans) > 0:
    print(*sorted(ans))
else:
    print(-1)